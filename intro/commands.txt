5 + 5

4 * 200

True && True

True && False

succ 9

succ 'a'

max 9 10

min (sin 12) 12

doubleMe x = x + x

doubleMe (doubleMe (doubleMe 2))

doubleUnder100 x = if x < 100 then 2 * x else x

[1,2,3,4] ++ [9,10,11,12]

'A':" SMALL CAT"

"A" ++ " SMALL CAT"

"Taylor Swift" !! 0

"Taylor Swift" !! 7

"I <3 " ++ [("Taylor Swift" !! 0), ("Taylor Swift" !! 7)]

let b = [[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]

b !! 1 !! 0

head [5,4,3,2,1]

tail [5,4,3,2,1]

last [5,4,3,2,1]

init [5,4,3,2,1]

null [1,2,3]

null []

take 3 [5,4,3,2,1]

take 10 (cycle [1,2,3])

drop 3 [8,4,2,1,5,6]

minimum [8,4,2,1,5,6]

maximum [1,9,2,3,4]

sum [5,2,1,6,3,2,5,7]

product [6,2,1,2]

4 `elem` [3,4,5,6]

[1..20]

['K'..'Z']

[0.1, 0.3 .. 1]

cycle [1,2,3]

take 10 (cycle [1,2,3])

take 12 (cycle "LOL ")

[x*2 | x <- [1..10]]

[x*2 | x <- [1..10], x*2 >= 12]

[ x | x <- [50..100], x `mod` 7 == 3]

boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x] 

boomBangs [7..13]

[ x | x <- [10..20], x /= 13, x /= 15, x /= 19]

let nouns = ["hobo","frog","pope"]

length' xs = sum [1 | _ <- xs] 

removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']] 

fst (1, "hello")

snd (1, "hello")

secondOfThree (_, y, _) = y

zip [1 .. 5] ["one", "two", "three", "four", "five"]

let rightTriangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2]

-- get the type of anything

:t (1,2,3,'a',[1,2,3,4])

-- type declaration

removeNonUppercase :: [Char] -> [Char]
removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']] 

factorial :: Integer -> Integer
factorial n = product [1..n]

circumference :: Float -> Float
circumference r = 2 * pi * r

addVectors :: (Num a) => (a, a) -> (a, a) -> (a, a)
addVectors a b = (fst a + fst b, snd a + snd b)

-- pull apart a triple

first :: (a, b, c) -> a
first (x, _, _) = x

second :: (a, b, c) -> b
second (_, y, _) = y

third :: (a, b, c) -> c
third (_, _, z) = z

-- pattern match plus lists

let xs = [(1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]
[a+b | (a,b) <- xs]

head' :: [a] -> a
head' [] = error "Can't call head on an empty list, dummy!"
head' (x:_) = x

tell :: (Show a) => [a] -> String
tell [] = "The list is empty"
tell (x:[]) = "The list has one element: " ++ show x
tell (x:y:[]) = "The list has two elements: " ++ show x ++ " and " ++ show y
tell (x:y:_) = "This list is long. The first two elements are: " ++ show x ++ " and " ++ show y

length' :: (Num b) => [a] -> b
length' [] = 0
length' (_:xs) = 1 + length' xs

-- complex function definition with guards and values

bmiTell :: (RealFloat a) => a -> a -> String
bmiTell weight height
    | bmi <= skinny = "You're underweight, you emo, you!"
    | bmi <= normal = "You're supposedly normal. Pffft, I bet you're ugly!"
    | bmi <= fat    = "You're fat! Lose some weight, fatty!"
    | otherwise     = "You're a whale, congratulations!"
    where bmi = weight / height ^ 2
          skinny = 18.5
          normal = 25.0
          fat = 30.0